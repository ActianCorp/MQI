#!/bin/bash
#
# Name:
#   mqi
#
# Description:
#
#   A shell script to provide similar functionality to the Matrix/ParAccel
#   cqi script to non_matrix clusters (e.g. Vector-H).
#
#   Initially developed to be incorporated into the Actian Services
#   Enterprise Monitoring Appliance (EMA), the script may also be used
#   for ad-hoc/general running of commands across a cluster.
#
#   In its native form, mqi would typically be used in a Matrix/ParAccel or
#   Vector-H cluster.  However, it is possible to use this script in other
#   cluster configurations.
#
#   When run in a Matrix/ParAccel a list of compute nodes is determined from
#   the padb.conf file.  A list of Vector-H data nodes are derived from the
#   hdfs/slaves file. 
#   
#
# History:
#   1.0 20-Aug-2014 (mark.whalley@actian.com)
#       Initial draft of script.
#
#   1.1 10-Jul-2015 (mark.whalley@actian.com)
#       Copyright and Description added to prepare for submission to GITHUB.
#
#   1.2 10-Sep-2015 (mark.whalley@actian.com)
#       Enhanced to handle Matrix compute node lists that may comprise of
#       individual IP addresses, ranges of IP addresses or a combination of
#       both.
#
#
#------------------------------------------------------------------------------
#   Copyright 2015 Actian Corporation
# 
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
h_prog_name=`basename ${0}`
h_prog_version="v1.2"
#------------------------------------------------------------------------------


INITIALIZE()
{

   h_node_list="./mqi_node_list"

   h_script="/tmp/$h_prog_name.script.$$"
   touch $h_script

   h_script_error="/tmp/$h_prog_name.script_error.$$"
   touch $h_script_error

   h_return_data="/tmp/$h_prog_name.return_data.$$"
   touch $h_return_data

   return 0
}

TIDYUP()
{

   rm $h_script
   rm $h_script_error
   rm $h_return_data


   return 0
}


PRINT_USAGE()
{
   printf "%s\n" "Usage:"
   printf "%s\n" "  $h_prog_name"
   printf "%s\n" "      -p|--platform M|V|L        Matrix|Vector|List"
   printf "%s\n" "      -s|--ii_system II_SYSTEM   Path to II_SYSTEM"
   printf "%s\n" "      -allx command              Run command on node(s)"
   printf "%s\n" "      -cmp file                  Compare file across node(s)"
   printf "%s\n" "      -cpall                     Copy file to node(s)"
   printf "%s\n" "      -ping                      Ping node"
   printf "%s\n" "      -o|--output file           Send output to file"
   printf "%s\n" "      -a address                 Only on one node"
   printf "%s\n" "      -v                         Verbose"



   return 0
}

MESSAGELOG()
{
   case $h_clv_verbose in
   "Y") printf "%s\n" "$*";;
   esac

   return 0
}

LOADMATRIXADDRESSES()
{

   h_padb_conf_comm_node_list=`grep "^comm_node_list" /home/paraccel/padb/rel/etc/padb.conf | awk -F' ' '{print $3}'`

   h_old_ifs=$IFS
   IFS=';'

   ha_padb_conf_comm_node_list=$h_padb_conf_comm_node_list

   h_noof_node_addresses=0

   for h_node_ip in $ha_padb_conf_comm_node_list
   do

      h_node_ip_1=`echo $h_node_ip | awk -F'.' '{print $1}'`
      h_node_ip_2=`echo $h_node_ip | awk -F'.' '{print $2}'`
      h_node_ip_3=`echo $h_node_ip | awk -F'.' '{print $3}'`
      h_node_ip_4_range=`echo $h_node_ip | awk -F'.' '{print $4}'`
   
      h_node_ip_start=`echo $h_node_ip_4_range | awk -F'-' '{print $1}'`
      h_node_ip_end=`echo $h_node_ip_4_range | awk -F'-' '{print $2}'`
   
      h_node_ip_4=$h_node_ip_start

      if [ -z "$h_node_ip_end" ]
      then
         h_node_ip_end=$h_node_ip_start
      fi

      while [ $h_node_ip_4 -le $h_node_ip_end ]
      do
   
         (( h_noof_node_addresses += 1 ))
   
         h_node_address=$h_node_ip_1"."$h_node_ip_2"."$h_node_ip_3"."$h_node_ip_4

         (( h_node_ip_4 += 1 ))
   
         ha_node_address[$h_noof_node_addresses]=$h_node_address
   
         h_ip_found=`/sbin/ifconfig | grep "addr:$h_node_address " | wc -l`
   
         case $h_ip_found in
         0)  ha_node_address_local[$h_noof_node_addresses]="N";;
         1)  ha_node_address_local[$h_noof_node_addresses]="Y";;
         *)  ha_node_address_local[$h_noof_node_addresses]="Y";;
         esac

      done

    done


   IFS=$h_old_ifs

   return 0
}

LOADVECTORADDRESSES()
{

   h_slaves_file="$h_clv_ii_system/ingres/files/hdfs/slaves"

   if [ ! -f $h_slaves_file ]
   then

      printf "%s\n" "CRITICAL $h_clv_slaves_file does not exist"
      PRINT_USAGE
      exit 1

   fi

   h_node_idx=0

   while read h_node_address
   do

      (( h_node_idx += 1 ))

#      ha_node_address[$h_node_idx]=$h_node_address

      h_ip_address=`ping -c 1 $h_node_address | grep PING | awk -F" " '{print $3}' | sed -e "s/(//" -e "s/)//"`
      ha_node_address[$h_node_idx]=$h_ip_address

      h_ip_found=`/sbin/ifconfig | grep "addr:$h_ip_address " | wc -l`

      case $h_ip_found in
      0)  ha_node_address_local[$h_node_idx]="N";;
      1)  ha_node_address_local[$h_node_idx]="Y";;
      *)  ha_node_address_local[$h_node_idx]="Y";;
      esac

   done < $h_slaves_file

   h_noof_node_addresses=$h_node_idx

   return 0
}

LOADMANUALLIST()
{
   h_node_idx=0

   while read h_node_address
   do

      (( h_node_idx += 1 ))
      ha_node_address[$h_node_idx]=$h_node_address

      h_ip_found=`/sbin/ifconfig | grep "$h_node_address " | wc -l`

      case $h_ip_found in
      0)  ha_node_address_local[$h_node_idx]="N";;
      1)  ha_node_address_local[$h_node_idx]="Y";;
      *)  ha_node_address_local[$h_node_idx]="Y";;
      esac

   done < $h_node_list

   h_noof_node_addresses=$h_node_idx

   return 0
}

LOADNODEADDRESS()
{

   if [ ! -z "$h_clv_single_ip_address" ]
   then
      h_noof_node_addresses=1
      ha_node_address[1]=$h_clv_single_ip_address

      h_ip_found=`/sbin/ifconfig | grep "$h_clv_single_ip_address " | wc -l`

      case $h_ip_found in
      0)  ha_node_address_local[1]="N";;
      1)  ha_node_address_local[1]="Y";;
      *)  ha_node_address_local[1]="Y";;
      esac

      return 0

   fi

   case $h_clv_platform in

   "m"|"M")
      LOADMATRIXADDRESSES;;

   "v"|"V")

      if [ -z $h_clv_ii_system ]
      then
         printf "%s\n" "CRITICAL II_SYSTEM has not been defined"
	 exit 1
      fi

      LOADVECTORADDRESSES;;

   "l"|"L")
      LOADMANUALLIST;;

   *)
      exit 1;;

   esac

   return 0
}

RUN_ALLX()
{

   h_node_idx=0

   while [ $h_node_idx -lt $h_noof_node_addresses ]
   do

      (( h_node_idx += 1 ))

      h_node_address=${ha_node_address[$h_node_idx]}

      case ${ha_node_address_local[$h_node_idx]} in
      "Y")  h_local_remote="Local"
            echo "$h_clv_cmd" > $h_script;;
      "N")  h_local_remote="Remote"
            echo "ssh $h_node_address $h_clv_cmd" > $h_script;
      esac

      MESSAGELOG ""
      MESSAGELOG "$h_local_remote Node: $h_node_address"

      chmod 755 $h_script
      $h_script 2> $h_script_error

      case $? in
      0)  h_return_code=0;;

      *)  h_return_code=$?

          MESSAGELOG "The following command reported an error:"

          h_message_text=`cat $h_script`
          MESSAGELOG $h_message_text 

          h_message_text=`cat $h_script_error`
          MESSAGELOG $h_message_text ;;
      esac

   done

   return 0
}

RUN_CPALL()
{

   MESSAGELOG "Copying the following file: $h_clv_file"

   h_node_idx=0

   while [ $h_node_idx -lt $h_noof_node_addresses ]
   do

      (( h_node_idx += 1 ))

      h_node_address=${ha_node_address[$h_node_idx]}

      case ${ha_node_address_local[$h_node_idx]} in
      "Y")  h_local_remote="Local"
            continue;;
      "N")  h_local_remote="Remote"
            echo "scp $h_clv_file $h_node_address:$h_clv_file" > $h_script;
      esac

      MESSAGELOG ""
      MESSAGELOG "$h_local_remote Node: $h_node_address"

      chmod 755 $h_script
      $h_script 2> $h_script_error

      case $? in
      0)  h_return_code=0;;

      *)  h_return_code=$?

          MESSAGELOG "The following command reported an error:"

          h_message_text=`cat $h_script`
          MESSAGELOG $h_message_text 

          h_message_text=`cat $h_script_error`
          MESSAGELOG $h_message_text ;;
      esac

   done

   return 0
}

RUN_CMP()
{

   MESSAGELOG "Comparing the following file: $h_clv_file"

   h_node_idx=0

   touch $h_return_data

   while [ $h_node_idx -lt $h_noof_node_addresses ]
   do

      (( h_node_idx += 1 ))

      h_node_address=${ha_node_address[$h_node_idx]}

      case ${ha_node_address_local[$h_node_idx]} in
      "Y")  h_local_remote="Local"
            echo "sum $h_clv_file" > $h_script;;
      "N")  h_local_remote="Remote"
            echo "ssh $h_node_address sum $h_clv_file" > $h_script;
      esac

      chmod 755 $h_script
      $h_script 1>> $h_return_data 2>$h_script_error

      case $? in
      0)  h_return_code=0;;

      *)  h_return_code=$?

          MESSAGELOG ""
          MESSAGELOG "$h_local_remote Node: $h_node_address"

          MESSAGELOG "The following command reported an error:"

          h_message_text=`cat $h_script`
          MESSAGELOG $h_message_text

          h_message_text=`cat $h_script_error`
          MESSAGELOG $h_message_text

          return 1;;
      esac

   done

   h_noof_lines=`sort -u $h_return_data | wc -l`

   case $h_noof_lines in
   1)  MESSAGELOG "All files match"
       h_function_return_code=0;;

   *)  MESSAGELOG "The files do not match"
       h_function_return_code=1;;

   esac

   return $h_function_return_code
}


RUN_PING()
{

   MESSAGELOG "Collecting ping results"

   h_node_idx=0

   h_colon=":"

   touch $h_return_data

   if [ -f $h_clv_output_file ]
   then
      rm $h_clv_output_file
   fi
   touch $h_clv_output_file

   while [ $h_node_idx -lt $h_noof_node_addresses ]
   do

      (( h_node_idx += 1 ))

      h_node_address=${ha_node_address[$h_node_idx]}

      case ${ha_node_address_local[$h_node_idx]} in
      "Y")  h_local_remote="Local"
            echo "ping -c $h_clv_ping_count ${ha_node_address[$h_node_idx]}" > $h_script;;
      "N")  h_local_remote="Remote"
            echo "ping -c $h_clv_ping_count ${ha_node_address[$h_node_idx]}" > $h_script;;
      esac

      chmod 755 $h_script
      $h_script 1> $h_return_data 2>$h_script_error

      case $? in
      0)  h_return_code=0

          h_rtt_min=`grep "^rtt " $h_return_data | awk -F" " '{print $4}' | awk -F"/" '{print $1}'`
          h_rtt_max=`grep "^rtt " $h_return_data | awk -F" " '{print $4}' | awk -F"/" '{print $3}'`

          printf "%s\n" "${ha_node_address[$h_node_idx]}$h_colon$h_rtt_min$h_colon$h_rtt_max" >> $h_clv_output_file
 
          ;;

      *)  h_return_code=$?

          MESSAGELOG ""
          MESSAGELOG "$h_local_remote Node: $h_node_address"

          MESSAGELOG "The following command reported an error:"

          h_message_text=`cat $h_script`
          MESSAGELOG $h_message_text

          h_message_text=`cat $h_script_error`
          MESSAGELOG $h_message_text

          return 1;;
      esac

   done

#   case $h_noof_lines in
#   1)  MESSAGELOG "All files match"
#       h_function_return_code=0;;
#
#   *)  MESSAGELOG "The files do not match"
#       h_function_return_code=1;;
#
#   esac
#
#   return $h_function_return_code
}


#------------------------------------------------------------------------------
# Main program
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Process Command Line Variables (clv)
#------------------------------------------------------------------------------

h_clv_do_something="N"
h_clv_opt=""
h_clv_cmd=""
h_clv_file=""
h_clv_verbose="N"
h_clv_single_ip_address=""
h_clv_platform=""
h_clv_ping_count=0
h_clv_output_file=""
h_clv_ii_system=""


while [ -n "$1" ]
do

   case "$1" in

   "-allx")
      h_clv_do_something="Y"
      h_clv_opt="allx"
      shift
      h_clv_cmd=$*
      break
      ;;

   "-p"|"--platform")
      h_clv_platform=$2
      shift
      ;;

   "-cmp")
      h_clv_do_something="Y"
      h_clv_opt="cmp"
      h_clv_file=$2
      shift
      ;;

   "-cpall")
      h_clv_do_something="Y"
      h_clv_opt="cpall"
      h_clv_file=$2
      shift
      ;;

   "-ping")
      h_clv_do_something="Y"
      h_clv_opt="ping"
      h_clv_ping_count=$2
      shift
      ;;

   "-o"|"--output")
      h_clv_output_file=$2
      shift
      ;;

   "-s"|"--ii_system")
      h_clv_ii_system=$2
      shift
      ;;

   "-a")
      h_clv_single_ip_address=$2
      shift
      ;;

   "-v")
      h_clv_verbose="Y"
      ;;


   *)
      printf "%s\n" "Invalid parameter: $1"
      PRINT_USAGE
      exit 1
      ;;

   esac

   shift

done

# -----------------------------------------------------------------------------
# Validate command line parameters
# -----------------------------------------------------------------------------

case $h_clv_do_something in

"N")
   printf "%s\n" "CRITICAL Nothing has been selected to do"
   PRINT_USAGE
   exit 1
   ;;

esac


if [ -z "$h_clv_platform" ]
then
   printf "%s\n" "CRITICAL platform not defined"
   PRINT_USAGE
   exit 1
fi

case $h_clv_platform in

"V"|"v")
   if [ -z "$h_clv_ii_system" ]
   then

      printf "%s\n" "CRITICAL II_SYSTEM has not been defined"
      PRINT_USAGE
      exit 1

   fi

   ;;

esac


INITIALIZE


case $h_clv_opt in

"allx")
   LOADNODEADDRESS
   RUN_ALLX
   h_return_status=$?
   TIDYUP
   exit $h_return_status;;

"cmp")
   LOADNODEADDRESS
   RUN_CMP
   h_return_status=$?
   TIDYUP
   exit $h_return_status;;

"cpall")
   LOADNODEADDRESS
   RUN_CPALL
   h_return_status=$?
   TIDYUP
   exit $h_return_status;;

"ping")
   LOADNODEADDRESS
   RUN_PING
   h_return_status=$?
   TIDYUP
   exit $h_return_status;;

esac

#------------------------------------------------------------------------------
# End of Script
#------------------------------------------------------------------------------
